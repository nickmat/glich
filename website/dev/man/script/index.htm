<!DOCTYPE html>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
 <title>Glich - Glich Script</title>
 <meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
 <link rel='icon' type='image/png' href='../../../sys/logo32x32.png' />
 <link rel='stylesheet' type='text/css' href='../../../sys/livery.css' />
 <link rel='stylesheet' type='text/css' href='../../../sys/glich.css' />
</head>
<body>

 <div class='heading'>
  <div class='logo'>
   <a  href='https://nickmat.github.io/glich/website/index.htm'>
    <img class='logo' src='../../../sys/logo266x100.png' alt='Logo' />
   </a>
  </div>
  Glich - v0.3.0 Manual<br />Glich Script Language
  <div class='clear'></div>
 </div>

 <div class="crumbs">
  <a href='../../../index.htm' class='m-item'>Home</a>
  <a href='../../../dev/index.htm' class='m-item'>Development</a>
  <a href='../../../dev/man/index.htm' class='m-item'>v0.3.0 Manual</a>
  <a href='index.htm' class='m-item thispage'>Glich Script</a>
  <a href='../../../dev/man/script/expr.htm' class='m-item nav'>►</a>
  <a href='../../../dev/man/index.htm' class='m-item nav'>◄</a>
 </div>

 <div class='menu'>
  <a href='../../../dev/man/script/expr.htm' class='m-item'>Expressions</a>
  <a href='../../../dev/man/script/write.htm' class='m-item'>write &amp; file</a>
  <a href='../../../dev/man/script/let.htm' class='m-item'>let Statement</a>
  <a href='../../../dev/man/script/end.htm' class='m-item'>end Statement</a>
  <a href='../../../dev/man/script/if.htm' class='m-item'>if Statement</a>
  <a href='../../../dev/man/script/do.htm' class='m-item'>do ... loop</a>
  <a href='../../../dev/man/script/function.htm' class='m-item'>Define function</a>
  <a href='../../../dev/man/script/bi-functions.htm' class='m-item'>Built-in Functions</a>
  <a href='../../../dev/man/script/command.htm' class='m-item'>command &amp; call</a>
  <a href='../../../dev/man/script/object.htm' class='m-item'>Define object</a>
  <a href='../../../dev/man/script/bi-objects.htm' class='m-item'>Built-in Objects</a>
  <a href='../../../dev/man/script/mark.htm' class='m-item'>mark Statement</a>
  <a href='../../../dev/man/script/set.htm' class='m-item'>set Statement</a>
  <a href='../../../dev/man/script/ebnf.htm' class='m-item'>EBNF Definition</a>
  <a href='../../../map.htm' class='m-item'>Site Map</a>
  <div class='menu-plus'>
   Code repository at<br />
   <a href='https://github.com/nickmat/glich'>
    <img src='../../../sys/github_logo.png' height='30' alt='GitHub' />
   </a><br />
  </div>
 </div>

<div id='content'>

<h2>Introduction</h2>
<p>
 Although it is designed to be extended, Glich is perfectly usable in its base form.
 A particular feature is its ability to perform integer set operations
 and to handle infinite integer ranges.
</p>

<h3>Hello World</h3>
<p>
 A script consists of one or more statements.
 As is usual in these circumstances, we present a hello world script.
</p>
<table class='code'>
<tr><th>Hello Script</th></tr>
<tr><td
>// Hello world script.

writeln "Hello world!";
</td></tr>
</table>
<img class='scrnprnt' src='../images/glcs-hello.png' alt='Hello World message screen print' />
<p>
 Using a text editor, copy the script and save as "hello.glcs".
 '.glcs' is the standard extension for Glich scripts.
 Run the Glich Script by starting the Glich interactive program glcs.exe
 and run the script with the command 'run hello.glcs'
 This should then result in the output shown.
</p>
<p>
 Scripts always use the UTF-8 character set.
</p>

<h3 class='clear'>Comments and White Space</h3>
<table class='code'>
<tr><td
>// A single line comment
/*
  This is a
  multi-line
  comment.
*/
</td></tr>
</table>
<p>
 The first line is a single line comment.
 Every thing from the "//" token to the end of the line taken to be a comment.
</p>
<p>
 Multi-line comments are included by placing them between the
 "/*" and "*/" tokens. Multi-line comments cannot be nested.
</p>
<p>
 Tabs, spaces, newlines and comments can appear anywhere within a script
 without its meaning being affecting.
 They are required only when necessary to separate tokens.
</p>

<h3>Tokens</h3>
<p>
 The tokens that make up the script can be categorised into three groups,
 operators, literals and names.
</p>
<p>
 Operators are used to construct expressions.
 Mostly they are non-alphanumeric characters but they also include some text words.
 A complete list is given in the <a href='expr.htm#operator-list'>Operator List</a> table.
 Where words are used, they are reserved and cannot be used as names.
</p>
<p>
 Literals can be numbers, text strings or collections of these values as objects.
 Numbers consist of the numeric characters '0-9' and optionally a type character.
 At this time, two types of integer numbers and a floating point number can be used,
 Numbers, Fields and Reals.
 Text strings are placed between '"' double quote characters.
 If you need to include a double quote in the text, use two together,
 as in "Say ""Hello""".
</p>
<p>
 Names are constructed from alphanumeric, '_' underline and ':' colon characters.
 They can not start with a numeric character.
 The meaning of a name is dependant on the context
 and the same name can be used for different purposes in a script.
 Names are used as statements, sub-statements, statements arguments and variables. 
</p>

<h3>Entities and Codes</h3>
<p>
 A code name is the term used to describe the name given to created entities
 such as <b>function</b>s, <b>command</b>s and <b>object</b>s.
</p>
<p>
 A code name can use any character except white space and the
 characters ':' colon and '#' hash.
 (More characters may be added to the excluded list in the future.)
 If the code conforms to the script name token definition it can be written directly,
 otherwise it must be written as a literal (i.e. in double quotes).
 If an expression is used to form a code, it must be placed in parenthesis.
</p>

<h3>Expressions and Variables</h3>
<p>
 Values in the HistoryCal Script can exist as one of a number of types:-
</p>
<ul>
 <li><b>String</b> - A sequence of unicode (UTF-8) characters.</li>
 <li><b>Float</b> - A floating point number, includes <b>±inf</b> (infinity) and <b>nan</b> (not a number).</li>
 <li><b>Number</b> - An integer number, can hold a value in the approximately range of ±10<sup>19</sup>.</li>
 <li><b>Field</b> - An integer number in the range of ±2147483644, <b>±infinity</b> and an undefined value '<b>?</b>'.</li>
 <li><b>Range</b> - One or more consecutive fields.</li>
 <li><b>RList</b> - A well-ordered set (list) of ranges. Includes the <b>empty</b> set.</li>
 <li><b>Bool</b> - The boolean value <b>true</b> or <b>false</b>.</li>
 <li><b>Object</b> - A named object and a collection of values and functions.</li>
 <li><b>Error</b> - If an error occurs during an expression, an error value is created.</li>
 <li><b>Null</b> - A value which has no defined content.</li>
</ul>
<p>
 Variables are defined by using the <b>let</b> statement,
 but their type is determined by their context.
 The lifetime of variables is controlled with the <b>mark</b> statement.
</p>

<h3>Statements</h3>
<p>
 A script consists of one or more of the following Statements:-
</p>
<table class='basic'>
<tr><th colspan='3'>Statement List</th></tr>
<tr><th>Statement</th><th>Use</th><th>Example</th></tr>
<tr><td class='code'><a href='function.htm'>call</a></td><td>Run a predefined command.</td><td class='example'>call bold_write("Hello");</td></tr>
<tr><td class='code'><a href='function.htm'>command</a></td><td>Define a Command which can be later called.</td><td class='example'>command bold_write( mess ) {
  write "&lt;b&gt;" + mess + "&lt;/b&gt;";
}</td></tr>
<tr><td class='code'><a href='do.htm'>do</a></td><td>Run script until a condition is met.</td><td class='example'>do while y &lt;= 2015
  writeln "1 Jan " + y;
  y += 1;
loop</td></tr>
<tr><td class='code'><a href='end.htm'>end</a></td><td>Stop running the script.</td><td class='example'>end;</td></tr>

<tr><td class='code'><a href='write.htm'>file</a></td><td>Define a file object for output.</td><td class='example'>file test "text.txt" append;</td></tr>

<tr><td class='code'><a href='function.htm'>function</a></td><td>Define a Function which can be used in an expression.</td><td class='example'>function double( x ) {
  result = x * 2;
}</td></tr>

<tr><td class='code'><a href='if.htm'>if</a></td><td>Run code depending on condition.</td><td class='example'>if value = 10
  write "&lt;b&gt;" + string value + "&lt;/b&gt;";
else
  write string value;
endif</td></tr>
<tr><td class='code'><a href='let.htm'>let</a></td><td>Initialise or change a variable.</td><td class='example'>let d = 1;</td></tr>
<tr><td class='code'><a href='mark.htm'>mark</a></td><td>Set a named mark in the script.</td><td class='example'>mark "test1";</td></tr>

<tr><td class='code'><a href='object.htm'>object</a></td><td>Define an Object for later use.</td><td class='example'>object greet {
    values greeting;
    function hi { result = greeting; }
}</td></tr>

<tr><td class='code'><a href='set.htm'>set</a></td><td>Set a global default setting.</td><td class='example'>set context hics;</td></tr>

<tr><td class='code'><a href='write.htm'>write</a></td><td>Create output.</td><td class='example'>write value + ", ";</td></tr>
<tr><td class='code'><a href='write.htm'>writeln</a></td><td>Create output, followed by a new line.</td><td class='example'>writeln.test "Today is " + today_str;</td></tr>
</table>

</div><!--id=content-->

 <div class="crumbs">
  <a href='../../../index.htm' class='m-item'>Home</a>
  <a href='../../../dev/index.htm' class='m-item'>Development</a>
  <a href='../../../dev/man/index.htm' class='m-item'>v0.3.0 Manual</a>
  <a href='index.htm' class='m-item thispage'>Glich Script</a>
  <a href='../../../dev/man/script/expr.htm' class='m-item nav'>►</a>
  <a href='../../../dev/man/index.htm' class='m-item nav'>◄</a>
 </div>

 <div class='tail'></div>

 <div id='valid'>
  <p>
   <a href='https://nickmat.github.io/WebPageLayout/website/index.htm'><img src='../../../sys/wpl_16.png' alt='Managed by WebPageLayout' height='16' width='16' /></a>
   <a href='https://www.gueury.com/mozilla/'><img src='../../../sys/tidy_16.gif' alt='Validated by HTML Validator (based on Tidy)' height='16' width='39' /></a>
  </p>
 </div>

 <div id='create-date'><p>8<sup>th</sup> February 2023</p></div>


</body>
</html>
