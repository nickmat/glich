<!DOCTYPE html>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
 <title>Glich - Built-in Functions</title>
 <meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
 <link rel='icon' type='image/png' href='../../../sys/logo32x32.png' />
 <link rel='stylesheet' type='text/css' href='../../../sys/livery.css' />
 <link rel='stylesheet' type='text/css' href='../../../sys/glich.css' />
</head>
<body>

 <div class='heading'>
  <div class='logo'>
   <a  href='https://nickmat.github.io/glich/website/index.htm'>
    <img class='logo' src='../../../sys/logo266x100.png' alt='Logo' />
   </a>
  </div>
  Glich - v0.3.0 Manual<br />Built-in Functions
  <div class='clear'></div>
 </div>

 <div class="crumbs">
  <a href='../../../index.htm' class='m-item'>Home</a>
  <a href='../../../dev/index.htm' class='m-item'>Development</a>
  <a href='../../../dev/man/index.htm' class='m-item'>v0.3.0 Manual</a>
  <a href='../../../dev/man/hics/index.htm' class='m-item'>Hics Extension</a>
  <a href='bi-functions.htm' class='m-item thispage'>Built-in Functions</a>
  <a href='../../../dev/man/hics/phrase.htm' class='m-item nav'>►</a>
  <a href='../../../dev/man/hics/bi-objects.htm' class='m-item nav'>◄</a>
 </div>

<div id='content' class='nomenu'>

<h2>Hics Extension Built-in Functions</h2>
<p>
 The Hics extension extends the number of functions built-in which are always available.
 These are described below in the following groups:-
</p>

<table class='basic'>
<tr><th>Group</th><th>Functions</th></tr>
<tr><td><a href='#date-rep'>Date Representation</a></td><td>@date, @text, @scheme, @element, @phrase</td></tr>
<tr><td><a href='#move-days'>Moveable Days</a></td><td>@easter</td></tr>
<tr><td><a href='#sch-data'>Scheme Details</a></td><td>@sch:list, @sch:object, @leapyear, @first, @last</td></tr>
<tr><td><a href='#fmt-data'>Format Details</a></td><td>@fmt:object</td></tr>
</table>

<h3 id='date-rep'>Date Representation</h3>
<p>
 The hics extension can uniquely describe a single day in Earth's past or future
 in three different ways.
</p>
<ul>
 <li><b>Date</b> A Julian Day Number (jdn). Uses a <b>Field</b> value type.</li>
 <li><b>Text</b>
  A character string with a defined calendar scheme and format.
  Uses a <b>String</b> value type.
 </li>
 <li><b>Scheme</b>
  A scheme object with fields as defined by the scheme definition.
  Uses an <b>Object</b> value type.
 </li>
</ul>
<p>
 Additionally, a text element and field in a scheme record can be converted
 using an <b>element</b> function.
</p>
<p>
 Finally, a date set can be represented as a text <b>date phrase</b>
 which can be converted to a well ordered list (RList type)
 with the <b>phrase</b> function.
</p>

<table class='basic'>
<tr><th>Function</th><th>Description</th></tr>
<tr><td>@<b>date</b>.<i>sch:fmt</i>( <i>string_type</i> )<br />@<b>date</b>( <i>scheme_object_type</i> )<br /></td><td>Converts to a set_type.</td></tr>
<tr><td>@<b>text</b>.<i>sch:fmt</i>( <i>set_type</i> )<br />@<b>text</b>.<i>sch:fmt</i>( <i>scheme_object_type</i> )<br /></td><td>Converts to a string_type.</td></tr>
<tr><td>@<b>scheme</b>.<i>sch</i>( <i>set_type</i> )<br />@<b>scheme</b>.<i>sch:fmt</i>( <i>string_type</i> )<br /></td><td>Converts to a scheme_object_type.</td></tr>
<tr><td>@<b>element</b>.<i>qual</i>( <i>field_type</i> )<br />@<b>element</b>.<i>qual</i>( <i>string_type</i> )<br /></td>
  <td>Converts field_type to string_type.<br />Converts string_type to field_type.</td></tr>
<tr><td>@<b>phrase</b>.<i>sch:fmt</i>( <i>string_type</i> )</td><td>Converts phrase string to a set_type.</td></tr>
</table>

<h4>Function: @date.sch:fmt( value )</h4>
<p>
 A date, in this context, means a rlist or an well ordered list of ranges.
 The date function converts to these types from a text string or a record (scheme object).
 The date function puts these two record types into a consistent rlist type.
 The rlist will then be demoted to a range or field if appropriate.
</p>
<p>
 If the original type is a string,
 then the function will need to know the scheme and format to be used.
 To convert to a record then the record scheme is required.
 If these are missing, the system output default settings are used.
 Note the a string description of an rlist may include embedded range and union symbols,
 but this is different from a Date Phrase.
 For instance, only one scheme format can be used for the conversion.
</p>
<table class='basic'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>@date( "19sep1948" )</td><td class='example'>2432814</td></tr>
 <tr><td class='example'>@date( "1940..1950|1945..1955" )</td><td class='example'>2429630..2435473</td></tr>
 <tr><td class='example'>@date.g:iso( "[1940..1950,1945..1955]" )</td><td class='example'>2429630..2435473</td></tr>
 <tr><td class='example'>@date( {s:g 1948, 9, 19} )</td><td class='example'>2432814</td></tr>
 <tr><td class='example'>@date( {s:g 1948} )</td><td class='example'>2432552..2432917</td></tr>
 <tr><td colspan='2'>The above examples assume a system input setting of "g:dmy".</td></tr>
</table>

<h4>Function: @text.sch:fmt( value )</h4>
<p>
 The text function converts a field, range, rlist or scheme object type into a string type.
</p>
<p>
 Except for a record type, the scheme code signature must be provided.
 If the format code is not included in the signature,
 then the default for that scheme is used.
</p>
<table class='basic'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>@text."g:dmy+"( 2432814 )</td><td class='example'>"19 September 1948"</td></tr>
 <tr><td class='example'>@text.g( 2429630..2435473 )</td><td class='example'>"1940..1955"</td></tr>
 <tr><td class='example'>@text.g:iso( 2429630..2429995 | 2433283..2435473 )</td><td class='example'>"[1940,1950..1955]"</td></tr>
 <tr><td class='example'>@text( {s:g 1948, 9, 19} )</td><td class='example'>"19 Sep 1948"</td></tr>
 <tr><td class='example'>@text( {s:j 1948} )</td><td class='example'>"1948"</td></tr>
 <tr><td colspan='2'>The above examples assume a system output setting of "g:dmy".</td></tr>
</table>

<h4>Function: @scheme.sch:fmt( value )</h4>
<p>
 The scheme function converts a field (as a julian day number) or string type into a record type.
 At this time, using the scheme function with a range or rlist type is an error.
</p>
<p>
 If a scheme:format signature is not given,
 then to convert a field, the output default setting is used,
 and if converting a string, the input default is used.
</p>
<p>
 Note that a scheme object created from the function always has all fields included, even the optional ones.
 Only main fields are given values though.
</p>
<table class='basic'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>@scheme.g:dmy( "19sep1948" )</td><td class='example'>{s:g 1948, 9, 19, 7}</td></tr>
 <tr><td class='example'>@scheme( "21??" )</td><td class='example'>{s:g null, null, 21, null}</td></tr>
 <tr><td class='example'>@scheme.:u( "1948year 9month 19day" )</td><td class='example'>{s:g 1948, 9, 19, 7}</td></tr>
 <tr><td class='example'>@scheme.j( 2432814 )</td><td class='example'>{s:j 1948, 9, 6, 7}</td></tr>
 <tr><td class='example'>@scheme( 2429630..2435473 )</td><td class='example'>Error</td></tr>
 <tr><td colspan='2'>The above examples assume a system input and output setting of "g:dmy".</td></tr>
</table>

<h4>Function: @element.qual( value )</h4>
<p>
 The element function converts between a string and a field.
 If a lexicon code is given with the function
 then that lexicon is used to provide the conversion.
 Using the function on any type other than a field or string results in an error.
</p>
<table class='basic'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>@element.w( 7 )</td><td class='example'>"Sunday"</td></tr>
 <tr><td class='example'>@element.ws:a( 7 )</td><td class='example'>"Sat"</td></tr>
 <tr><td class='example'>@element.w( "wed" )</td><td class='example'>3</td></tr>
 <tr><td class='example'>@element.:rn( "xiv" )</td><td class='example'>14</td></tr>
 <tr><td class='example'>@element.:rn( 14 )</td><td class='example'>"XIV"</td></tr>
 <tr><td class='example'>@element.:rn:l( 14 )</td><td class='example'>"xiv"</td></tr>
 <tr><td class='example'>@element.:os( 2 )</td><td class='example'>"2nd"</td></tr>
 <tr><td class='example'>@element.:oa( 2 )</td><td class='example'>"nd"</td></tr>
 <tr><td class='example'>@element.:oa:u( 2 )</td><td class='example'>"ND"</td></tr>
 <tr><td class='example'>@element( "10" )</td><td class='example'>10</td></tr>
 <tr><td class='example'>@element( 10 )</td><td class='example'>"10"</td></tr>
</table>

<h4>Function: @phrase.sch:fmt( string )</h4>
<p>
 A date phrase is a meta language similar to the Glich language
 but designed to write a period or periods of time in days.
 A default calendar scheme can be defined for the phrase,
 and elements within the phrase can use different calendar schemes.
</p>
<p>See the <a href='phrase.htm'>Date Phrase Meta Language</a> page for details.</p>
<p>
 The phrase function takes a date phrase string
 and converts it to a well ordered rlist.
</p>
<table class='basic'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>@phrase.g:dmy( "10nov2023" )</td><td class='example'>2460259</td></tr>
 <tr><td class='example'>@phrase( "!today&.2023" )</td><td class='example'>2459946..2460258 | 2460260..2460310</td></tr>
 <tr><td class='example'>@phrase( "8mar1741 | j:dmy# 8mar1741 | ja:dmc# 8mar1741" )</td><td class='example'>2357014 | 2357025 | 2357390</td></tr>
 <tr><td class='example'>@phrase( "1890..1900 | 1910..1920" )</td><td class='example'>2411369..2415385 | 2418673..2422690</td></tr>
 <tr><td colspan='2'>The above examples assume a system input and output setting of "g:dmy" and today = 10 Nov 2023.</td></tr>
</table>

<h3 id='move-days'>Moveable Days</h3>

<table class='basic'>
<tr><th>Function</th><th>Description</th></tr>
<tr><td>@<b>easter</b>.<i>base</i>( <i>year</i> )</td><td>Result is the jdn day of Easter Sunday for year.</td></tr>
</table>

<h4>Function @easter.base( year )</h4>
<p>
 The <b>easter</b> function returns Easter Sunday for the given year.
 The base calendar can be either <b>julian</b> or <b>gregorian</b>.
 Both the base and the year are required.
</p>

<table class='basic'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>@easter.gregorian( 2025 )</td><td class='example'>2460786</td></tr>
 <tr><td class='example'>@easter.julian( 1750 )</td><td class='example'>2360350</td></tr>
</table>

<h3 id='sch-data'>Scheme Details</h3>

<table class='basic'>
<tr><th>Function</th><th>Description</th></tr>
<tr><td>@<b>sch:list</b></td><td>Returns an object with a list of available scheme codes (scodes).</td></tr>
<tr><td>@<b>sch:object</b>.<i>scode</i></td><td>Returns a sch: object detailing the scheme.</td></tr>
<tr><td>@<b>leapyear</b>.<i>scode</i>( <i>year</i> )</td><td>Returns 'true' if the year is a leap year, otherwise 'false'</td></tr>
<tr><td>@<b>first</b></td><td>First value of scheme record field. Development</td></tr>
<tr><td>@<b>last</b></td><td>Last value of scheme record field. Development</td></tr>
</table>

<h4>Function: @sch:list</h4>
<p>
 Function returns an object containing a list of available scheme codes (scodes).
</p>
<table class='basic'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>@sch:list</td><td class='example' style='white-space: normal'>{: "ay", "c", "eh", "fr", "g", "go", "gw", "h", "i", "if", "ims", "j", "ja", "jap", "jce", "jdn", "je", "jn", "jwn", "jwsn", "mjd", "rd"}</td></tr>
 <tr><td class='example'>@sch:list@size</td><td class='example'>22</td></tr>
</table>

<h4>Function: @sch:object</h4>
<p>
 Function returns a <b>sch:</b> object type.
</p>
<table class='basic'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>@sch:object.g</td><td class='example' style='white-space: normal'>{sch: "g", "Gregorian", "gregorian", {: "year", "month", "day", "wday"}, "g", {: "iso", "iso_set", "dmy", "dmy+", "wdmy", "wdmy+", "out", "full", "mdy", "mdy+", "wmdy", "wmdy+", "ymd", "def", "u"}, "dmy", "dmy", true}</td></tr>
 <tr><td class='example'>@sch:object.jce[fieldnames]</td><td class='example' style='white-space: normal'>{: "year", "month", "day", "ce", "ceyear", "wday"}</td></tr>
</table>

<h4>Function: @leapyear</h4>
<p>
 If the calendar is a lunar-solar calendar type, then if there are 13 months in the year, the function returns true.
 If the calendar is a solar calendar type, the function returns true if there is an extra day in the year.
 For every other situation, the function returns false.
</p>

<h3 id='fmt-data'>Format Details</h3>

<table class='basic'>
<tr><th>Function</th><th>Description</th></tr>
<tr><td>@<b>fmt:object</b>.<i>fcode</i></td><td>Returns a fmt: object detailing the format.</td></tr>
</table>

<h4>Function: @fmt:object</h4>
<p>
 Function returns a <b>fmt:</b> object type.
</p>
<table class='basic'>
<tr><th>Example</th><th>Result</th></tr>
 <tr><td class='example'>@fmt:object.g:dmy</td><td class='example' style='white-space: normal'>{fmt: "dmy", "j", "text", true, "day month year", "dd Mon yyyy", true}</td></tr>
 <tr><td class='example'>@fmt:object.jce:dmye[pseudo:out]</td><td class='example' style='white-space: normal'>dd Mon yyyy CE</td></tr>
</table>

</div><!--id=content-->

 <div class="crumbs">
  <a href='../../../index.htm' class='m-item'>Home</a>
  <a href='../../../dev/index.htm' class='m-item'>Development</a>
  <a href='../../../dev/man/index.htm' class='m-item'>v0.3.0 Manual</a>
  <a href='../../../dev/man/hics/index.htm' class='m-item'>Hics Extension</a>
  <a href='bi-functions.htm' class='m-item thispage'>Built-in Functions</a>
  <a href='../../../dev/man/hics/phrase.htm' class='m-item nav'>►</a>
  <a href='../../../dev/man/hics/bi-objects.htm' class='m-item nav'>◄</a>
 </div>

 <div class='tail'></div>

 <div id='valid'>
  <p>
   <a href='https://nickmat.github.io/WebPageLayout/website/index.htm'><img src='../../../sys/wpl_16.png' alt='Managed by WebPageLayout' height='16' width='16' /></a>
   <a href='https://www.gueury.com/mozilla/'><img src='../../../sys/tidy_16.gif' alt='Validated by HTML Validator (based on Tidy)' height='16' width='39' /></a>
  </p>
 </div>

 <div id='create-date'><p>20<sup>th</sup> June 2023</p></div>


</body>
</html>
