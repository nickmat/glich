/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Name:        lib/hics/french_rep.hcs
 * Project:     Glich: Extendable Script Language.
 * Purpose:     Default script for French Republican calendar.
 * Author:      Nick Matthews
 * Website:     https://github.com/nickmat/glich
 * Created:     20th June 2024
 * Copyright:   Copyright (c) 2024, Nick Matthews.
 * Licence:     GNU GPLv3
 *
 *  Glich is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Glich is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Glich.  If not, see <http://www.gnu.org/licenses/>.
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*/


lexicon frnm {
    name "Normal Month names";
    fieldname nmonth;
    lang en;
    pseudo    Month,  Mon;
    tokens {
        1, "Vendémiaire",      "Vend";
        2, "Brumaire",         "Brum";
        3, "Frimaire",         "Frim";
        4, "Nivôse",           "Nivo";
        5, "Pluviôse",         "Pluv";
        6, "Ventôse",          "Vent";
        7, "Germinal",         "Germ";
        8, "Floréal",          "Flor";
        9, "Prairial",         "Prai";
        10, "Messidor",        "Mess";
        11, "Thermidor",       "Ther";
        12, "Fructidor",       "Fruc";
    }
}

lexicon frm {
    name "Month names";
    inherit frnm;
    fieldname month;
    tokens {
        13, "Complémentaires", "Comp";
    }
}

lexicon frcomp {
    name "Complementary Days";
    fieldname cday;
    lang en;
    pseudo    CompDay,           CDay;
    tokens {
        1, "Fête de la Vertu",      "Ver";
        2, "Fête du Génie",         "Gen";
        3, "Fête du Travail",       "Trav";
        4, "Fête de l'Opinion",     "Opin";
        5, "Fête des Récompenses",  "Rec";
        6, "Fête de la Révolution", "Rev";
    }
}

lexicon frdd {
    name "Decade Day";
    fieldname dday;
    lang en;
    pseudo    DecDay,  DDay;
    tokens {
        1, "Primidi",  "Prim";
        2, "Duodi",    "Duo";
        3, "Tridi",    "Tri";
        4, "Quartidi", "Quar";
        5, "Quintidi", "Quin";
        6, "Sextidi",  "Sext";
        7, "Septidi",  "Sept";
        8, "Octidi",   "Oct";
        9, "Nonidi",   "Non";
        10, "Décadi",  "Dec";
    }
}

grammar fr {
    name "French Republic";
    fields year month day;
    calculated nmonth nmday cday, dday;
    optional wday;
    rank year nmonth nmday;
    lexicons frm, frnm, frcomp, frdd, w;
    alias pseudo { dd day; mm month; yyyy year; mm nmonth; dd nmday; c cday; d dday; w wday; }
    alias unit { d day; m month; y year; nm nmonth; nd nmday; cd cday; dd dday; }

    // Record: year month day nmonth nmday cday dday wday
    function calc_to_def {
        if cday = null
            month = nmonth;
            day = nmday;
            dday = ( (day - 1) mod 10 ) + 1;
        else
            month = 13;
            day = cday;
            dday = null;
        endif
        result = this;
    }
    function def_to_calc {
        if month = null
            end;
        endif
        if month < 13
            nmonth = month;
            nmday = day;
            cday = null;
            dday = ( (day - 1) mod 10 ) + 1;
        else
            nmonth = null;
            nmday = null;
            cday = day;
            dday = null;
        endif
        result = this;
    }

    use { calculate def_to_calc; from:text calc_to_def; }

    format dmy_a {
        inout "{day} |{month:frm:a} |{year}";
        rank year month day;
        use:in def_to_calc;
    }
    format dmy {
        inout "{day} |{month:frm} |{year}";
        rank year month day;
        use:in def_to_calc;
    }
    format ymd {
        inout "{year} |{month:frm} |{day}";
        rank year month day;
        use:in def_to_calc;
    }
    format  cdmy   "{cday:frcomp} |{nmday} |{nmonth:frnm} |{year}";
    format "cdmy-" "{cday:frcomp:a} |{nmday} |{nmonth:frnm:a} |{year}";
    format out {
        output "{cday:frcomp} |{nmday} |{nmonth:frnm} |an {year::rn}";
    }
    format  dcdmy   "{dday:frdd} |{cday:frcomp} |{nmday} |{nmonth:frnm} |{year}";
    format "dcdmy-" "{dday:frdd:a} |{cday:frcomp:a} |{nmday} |{nmonth:frnm:a} |{year}";
    format  wcdmy   "{wday:w}, |{cday:frcomp} |{nmday} |{nmonth:frnm} |{year}";
    format "wcdmy-" "{wday:w:a}, |{cday:frcomp:a} |{nmday} |{nmonth:frnm:a} |{year}";
    format gedcom {
        inout "{day} |{month:frm:a:u} |{year}";
        rank year month day;
        use:in def_to_calc;
    }

    preferred dmy;
}

scheme fr {
    name "French Republic";
    base french;
    grammar fr;
}

// End of scripts/french_rep.hcs file
